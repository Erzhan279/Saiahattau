from flask import Flask, request
import requests
import os

app = Flask(__name__)

# === üîê –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä ===
BOT_TOKEN = "8110766276:AAHZvFiCBXGh3d7vihZHNAaBIPwnqgpaNoY"
GEMINI_API_KEY = "AIzaSyDM2rDqMM1eV6fEHCU-xcLxE1a_GW1v-sQ"

TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

# === üì© Telegram-“ì–∞ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É ===
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# === üí¨ Gemini –∞—Ä“õ—ã–ª—ã –∂–∞—É–∞–ø –∞–ª—É ===
def ask_gemini(prompt):
    prompt_text = (
        "–°–µ–Ω –∫”ô—Å—ñ–±–∏ —Ç—É—Ä –∞–≥–µ–Ω—Ç—Å—ñ“£. "
        "–¢–µ–∫ –î—É–±–∞–π üá¶üá™ –∂”ô–Ω–µ –¢“Ø—Ä–∫–∏—è üáπüá∑ —Ç—É—Ä–∞–ª—ã —Ç—É—Ä–∏–∑–º, —Å–∞—è—Ö–∞—Ç, –±–∞“ì–∞, “õ–æ–Ω–∞“õ“Ø–π, “±—à—É, –≤–∏–∑–∞, –¥–µ–º–∞–ª—ã—Å –∂–∞–π–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä. "
        "–ë–∞—Å“õ–∞ —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä–º–µ. "
        f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {prompt}"
    )
    data = {"contents": [{"parts": [{"text": prompt_text}]}]}
    response = requests.post(
        GEMINI_URL,
        headers={
            "Content-Type": "application/json",
            "X-goog-api-key": GEMINI_API_KEY
        },
        json=data
    )
    if response.status_code == 200:
        try:
            js = response.json()
            return js["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "‚ö†Ô∏è –ñ–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–ª–¥–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã."
    else:
        return f"‚ö†Ô∏è Gemini “õ–∞—Ç–µ—Å—ñ: {response.text}"

# === üåê Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"

    msg = update["message"]
    chat_id = msg["chat"]["id"]
    text = msg.get("text", "").strip()

    # /start –∫–æ–º–∞–Ω–¥–∞—Å—ã
    if text.lower() == "/start":
        buttons = [["üá¶üá™ –î—É–±–∞–π", "üáπüá∑ –¢“Ø—Ä–∫–∏—è"]]
        welcome = (
            "üå¥ <b>–¢—É—Ä –∞–≥–µ–Ω—Ç–∫–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!</b>\n\n"
            "–ú–µ–Ω —Å–∞“ì–∞–Ω –î—É–±–∞–π –∂”ô–Ω–µ –¢“Ø—Ä–∫–∏—è –µ–ª–¥–µ—Ä—ñ–Ω–µ —Å–∞—è—Ö–∞—Ç —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ–º üåç\n"
            "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã“£ –±—ñ—Ä—ñ–Ω —Ç–∞“£–¥–∞:"
        )
        send_message(chat_id, welcome, buttons)
        return "ok"

    # üá¶üá™ –î—É–±–∞–π —Ç—É—Ä–∞–ª—ã
    if "–¥—É–±–∞–π" in text.lower():
        reply = ask_gemini("–î—É–±–∞–π —Ç—É—Ä–ª–∞—Ä—ã —Ç—É—Ä–∞–ª—ã –∂–∞–ª–ø—ã –º”ô–ª—ñ–º–µ—Ç, –±–∞“ì–∞—Å—ã –∂”ô–Ω–µ –≤–∏–∑–∞–ª—ã“õ —Ç–∞–ª–∞–ø—Ç–∞—Ä")
        send_message(chat_id, f"üá¶üá™ <b>–î—É–±–∞–π —Ç—É—Ä—ã:</b>\n\n{reply}")
        return "ok"

    # üáπüá∑ –¢“Ø—Ä–∫–∏—è —Ç—É—Ä–∞–ª—ã
    if "—Ç“Ø—Ä–∫–∏—è" in text.lower():
        reply = ask_gemini("–¢“Ø—Ä–∫–∏—è —Ç—É—Ä–ª–∞—Ä—ã —Ç—É—Ä–∞–ª—ã –∂–∞–ª–ø—ã –º”ô–ª—ñ–º–µ—Ç, –±–∞“ì–∞—Å—ã –∂”ô–Ω–µ “õ–æ–Ω–∞“õ“Ø–π–ª–µ—Ä –∂–∞–π–ª—ã")
        send_message(chat_id, f"üáπüá∑ <b>–¢“Ø—Ä–∫–∏—è —Ç—É—Ä—ã:</b>\n\n{reply}")
        return "ok"

    # –ë–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ —Ç–µ–∫ —Ç—É—Ä–∏–∑–º –±–æ–π—ã–Ω—à–∞ –∂–∞—É–∞–ø
    reply = ask_gemini(text)
    send_message(chat_id, reply)
    return "ok"

# === üè† “Æ–π –±–µ—Ç—ñ ===
@app.route("/")
def home():
    return "üåç –¢—É—Ä –∞–≥–µ–Ω—Ç –±–æ—Ç –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"

# === üöÄ –Ü—Å–∫–µ “õ–æ—Å—É ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
