"""
Telegram Travel Bot üá∞üáø
–°—Ç–∞—Ä—Ç—Ç–∞ –∂—ã–ª—ã “õ–∞—Ä—Å—ã –∞–ª—É –º”ô—Ç—ñ–Ω—ñ:
üëã –°”ô–ª–µ–º! –ú–µ–Ω —Å–∞—è—Ö–∞—Ç—Ç–∞—É —Ç—É—Ä –∞–≥–µ–Ω—Ç—ñ –∫”©–º–µ–∫—à—ñ—Å—ñ–º—ñ–Ω.
üåç –°–∞—è—Ö–∞—Ç“õ–∞ –±—ñ—Ä–≥–µ —à—ã“ì–∞–π—ã“õ!
“ö–∞–π –µ–ª —Ç—É—Ä–∞–ª—ã –±—ñ–ª–≥—ñ“£ –∫–µ–ª–µ–¥—ñ?

[–î—É–±–∞–π üèùÔ∏è]   [–¢“Ø—Ä–∫–∏—è üáπüá∑]
"""

import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# =======================================================
# üîê –ú“±–Ω–¥–∞ ”©–∑ —Ç–æ–∫–µ–Ω–¥–µ—Ä—ñ“£–¥—ñ “õ–æ–π:
# -------------------------------------------------------
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN_HERE"
GEMINI_API_KEY = "YOUR_GEMINI_API_KEY_HERE"
# =======================================================

SYSTEM_PROMPT = """
–°–µ–Ω ‚Äî —Å–∞—è—Ö–∞—Ç—Ç–∞—É –±–æ–π—ã–Ω—à–∞ —Ç—É—Ä –∞–≥–µ–Ω—Ç –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ“£.
–¢–µ–∫ –µ–∫—ñ –µ–ª —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ—Å—ñ“£: –î—É–±–∞–π –∂”ô–Ω–µ –¢“Ø—Ä–∫–∏—è.
–ë–∞“ì–∞, –º–∞—É—Å—ã–º, –≤–∏–∑–∞, –∫”©—Ä—ñ–∫—Ç—ñ –∂–µ—Ä–ª–µ—Ä —Ç—É—Ä–∞–ª—ã “õ—ã—Å“õ–∞ ”ô—Ä—ñ –∂—ã–ª—ã –∂–∞—É–∞–ø –±–µ—Ä.
–ë–∞—Å“õ–∞ —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä–º–µ.
"""

SAMPLE_RESPONSES = {
    "dubai": (
        "üå¥ **–î—É–±–∞–π** —Ç—É—Ä–∞–ª—ã “õ—ã—Å“õ–∞—à–∞:\n\n"
        "‚Ä¢ –û—Ä—Ç–∞—à–∞ —Ç—É—Ä (7 –∫“Ø–Ω) ‚Äî —à–∞–º–∞–º–µ–Ω *900‚Äì1400 USD* –∞–¥–∞–º –±–∞—Å—ã–Ω–∞.\n"
        "‚Ä¢ –í–∏–∑–∞: —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã —Ç“Ø—Ä–¥–µ –æ“£–∞–π –∞–ª—ã–Ω–∞–¥—ã.\n"
        "‚Ä¢ –ú–∞—É—Å—ã–º: *“õ–∞–∑–∞–Ω‚Äì—Å”ô—É—ñ—Ä* –µ“£ –∂–∞–π–ª—ã.\n"
        "‚Ä¢ –ö”©—Ä—ñ–∫—Ç—ñ –∂–µ—Ä–ª–µ—Ä: –ë—É—Ä–∂ –•–∞–ª–∏—Ñ–∞, —à”©–ª —Å–∞—Ñ–∞—Ä–∏, –î—É–±–∞–π –ú–æ–ª–ª.\n\n"
        "_–ù–∞“õ—Ç—ã –∫“Ø–Ω –∞–π—Ç—Å–∞“£, —Ç—É—Ä–∞ “±—Å—ã–Ω—ã—Å—Ç–∞—Ä –±–µ—Ä–µ–º—ñ–Ω._"
    ),
    "turkey": (
        "üáπüá∑ **–¢“Ø—Ä–∫–∏—è** —Ç—É—Ä–∞–ª—ã “õ—ã—Å“õ–∞—à–∞:\n\n"
        "‚Ä¢ –û—Ä—Ç–∞—à–∞ —Ç—É—Ä (7 –∫“Ø–Ω) ‚Äî —à–∞–º–∞–º–µ–Ω *450‚Äì900 USD* –∞–¥–∞–º –±–∞—Å—ã–Ω–∞.\n"
        "‚Ä¢ –í–∏–∑–∞: –∫”©–ø—Ç–µ–≥–µ–Ω –µ–ª –∞–∑–∞–º–∞—Ç—Ç–∞—Ä—ã–Ω–∞ –∂–µ“£—ñ–ª–¥–µ—Ç—ñ–ª–≥–µ–Ω –Ω–µ–º–µ—Å–µ –≤–∏–∑–∞—Å—ã–∑.\n"
        "‚Ä¢ –ú–∞—É—Å—ã–º: *–º–∞—É—Å—ã–º‚Äì“õ—ã—Ä–∫“Ø–π–µ–∫* ‚Äî –∂–∞“ì–∞–∂–∞–π –º–∞—É—Å—ã–º—ã.\n"
        "‚Ä¢ –ö”©—Ä—ñ–∫—Ç—ñ –∂–µ—Ä–ª–µ—Ä: –ê–Ω—Ç–∞–ª–∏—è, –ö–∞–ø–ø–∞–¥–æ–∫–∏—è, –°—Ç–∞–º–±—É–ª.\n\n"
        "_–ö“Ø–Ω—ñ“£–¥—ñ –∞–π—Ç—Å–∞“£, –Ω–∞“õ—Ç—ã –±–∞“ì–∞ –µ—Å–µ–ø—Ç–µ–π –∞–ª–∞–º—ã–Ω._"
    ),
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî “õ–∞—Ä—Å—ã –∞–ª—É –∂”ô–Ω–µ –µ–∫—ñ –±–∞—Ç—ã—Ä–º–∞."""
    keyboard = [
        [
            InlineKeyboardButton("–î—É–±–∞–π üèùÔ∏è", callback_data="country:dubai"),
            InlineKeyboardButton("–¢“Ø—Ä–∫–∏—è üáπüá∑", callback_data="country:turkey"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        "üëã –°”ô–ª–µ–º! –ú–µ–Ω —Å–∞—è—Ö–∞—Ç—Ç–∞—É —Ç—É—Ä –∞–≥–µ–Ω—Ç—ñ –∫”©–º–µ–∫—à—ñ—Å—ñ–º—ñ–Ω.\n\n"
        "üåç –°–∞—è—Ö–∞—Ç“õ–∞ –±—ñ—Ä–≥–µ —à—ã“ì–∞–π—ã“õ!\n"
        "“ö–∞–π –µ–ª —Ç—É—Ä–∞–ª—ã –±—ñ–ª–≥—ñ“£ –∫–µ–ª–µ–¥—ñ?"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode="Markdown")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –µ–ª–¥—ñ —Ç–∞“£–¥–∞“ì–∞–Ω–¥–∞ –∂–∞—É–∞–ø –±–µ—Ä—É."""
    query = update.callback_query
    await query.answer()

    data = query.data or ""
    if not data.startswith("country:"):
        await query.edit_message_text("“ö–∞–π—Ç–∞ /start –±–∞—Å—ã–ø –∫”©—Ä—ñ“£—ñ–∑ üôÇ")
        return

    country = data.split(":")[1].lower()

    # –ï–≥–µ—Ä Gemini API –±–∞—Ä –±–æ–ª—Å–∞ ‚Äî —Å–æ–ª –∞—Ä“õ—ã–ª—ã –∂–∞—É–∞–ø –∞–ª—É“ì–∞ –±–æ–ª–∞–¥—ã
    if GEMINI_API_KEY and GEMINI_API_KEY != "YOUR_GEMINI_API_KEY_HERE":
        try:
            text = call_llm(country)
        except Exception:
            text = SAMPLE_RESPONSES.get(country, "–ê“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    else:
        text = SAMPLE_RESPONSES.get(country, "–ê“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã.")

    await query.edit_message_text(text, parse_mode="Markdown")


def call_llm(country: str) -> str:
    """Gemini API —à–∞“õ—ã—Ä—É “Ø–ª–≥—ñ—Å—ñ (–Ω–∞“õ—Ç—ã URL –º–µ–Ω —Ñ–æ—Ä–º–∞—Ç—Ç—ã ”©–∑—ñ“£–Ω—ñ“£ API “õ“±–∂–∞—Ç—ã–Ω–∞ —Å–∞–π ”©–∑–≥–µ—Ä—Ç—ñ“£–¥–µ—Ä)."""
    endpoint = "https://api.example.com/v1/generate"
    headers = {"Authorization": f"Bearer {GEMINI_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "system": SYSTEM_PROMPT,
        "prompt": f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {country} —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Å“±—Ä–∞–π–¥—ã.",
        "temperature": 0.3,
        "max_tokens": 400,
    }

    r = requests.post(endpoint, json=payload, headers=headers, timeout=10)
    if r.status_code != 200:
        raise Exception(f"LLM error {r.status_code}: {r.text}")
    data = r.json()
    return data.get("text", "–ñ–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã.")


def main():
    logging.basicConfig(level=logging.INFO)
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
        print("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—É–¥—ñ “±–º—ã—Ç–ø–∞–¥—ã“£ –±–∞?")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("‚úÖ –¢—É—Ä –∞–≥–µ–Ω—Ç –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã! /start –±–∞—Å—ã–ø –∫”©—Ä.")
    app.run_polling()


if __name__ == "__main__":
    main()
